<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ChenHaoHere.github.io</id>
    <title>Blabla</title>
    <updated>2020-04-01T01:50:49.789Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ChenHaoHere.github.io"/>
    <link rel="self" href="https://ChenHaoHere.github.io/atom.xml"/>
    <subtitle>我的Blog</subtitle>
    <logo>https://ChenHaoHere.github.io/images/avatar.png</logo>
    <icon>https://ChenHaoHere.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Blabla</rights>
    <entry>
        <title type="html"><![CDATA[添加conda env到jupyter lab/notebook]]></title>
        <id>https://ChenHaoHere.github.io/post/tian-jia-conda-env-dao-jupyter-labnotebook/</id>
        <link href="https://ChenHaoHere.github.io/post/tian-jia-conda-env-dao-jupyter-labnotebook/">
        </link>
        <updated>2020-04-01T01:49:54.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-shell"> conda activate cenv
(cenv)$ conda install ipykernel
(cenv)$ ipython kernel install --user --name=&lt;any_name_for_kernel&gt;
(cenv($ conda deactivate
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ windows10 磁贴]]></title>
        <id>https://ChenHaoHere.github.io/post/windows10-ci-tie/</id>
        <link href="https://ChenHaoHere.github.io/post/windows10-ci-tie/">
        </link>
        <updated>2020-03-31T07:27:39.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>辛苦了大半个下午，终于把自己的win10变好看了</p>
<p>主要是在磁贴上花了大功夫</p>
<p>最后桌面是空的了，常用的在任务栏和开始菜单</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5CChenHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200331152709598.png" alt="image-20200331152709598" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[划分数据集]]></title>
        <id>https://ChenHaoHere.github.io/post/hua-fen-shu-ju-ji/</id>
        <link href="https://ChenHaoHere.github.io/post/hua-fen-shu-ju-ji/">
        </link>
        <updated>2020-03-30T08:52:27.000Z</updated>
        <content type="html"><![CDATA[<p>老是忘，放着随时取用</p>
<pre><code class="language-python">train_test_split(df,test_size=0.2, random_state=0)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS code yapf整理代码]]></title>
        <id>https://ChenHaoHere.github.io/post/vs-code-yapf-zheng-li-dai-ma/</id>
        <link href="https://ChenHaoHere.github.io/post/vs-code-yapf-zheng-li-dai-ma/">
        </link>
        <updated>2020-03-27T04:50:23.000Z</updated>
        <content type="html"><![CDATA[<p>&quot;python.formatting.provider&quot;: &quot;yapf&quot;</p>
<p>然后<strong>Alt+Shift+F</strong>就可以自动格式化代码</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[.whl 下载]]></title>
        <id>https://ChenHaoHere.github.io/post/whl-xia-zai/</id>
        <link href="https://ChenHaoHere.github.io/post/whl-xia-zai/">
        </link>
        <updated>2020-03-26T00:37:40.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://pypi.org/">https://pypi.org/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vscode插件推荐]]></title>
        <id>https://ChenHaoHere.github.io/post/vscode-cha-jian-tui-jian/</id>
        <link href="https://ChenHaoHere.github.io/post/vscode-cha-jian-tui-jian/">
        </link>
        <updated>2020-03-25T13:26:23.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_38698753/article/details/93190356">https://blog.csdn.net/qq_38698753/article/details/93190356</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[chrome安装在别的盘]]></title>
        <id>https://ChenHaoHere.github.io/post/chrome-an-zhuang-zai-bie-de-pan/</id>
        <link href="https://ChenHaoHere.github.io/post/chrome-an-zhuang-zai-bie-de-pan/">
        </link>
        <updated>2020-03-24T23:55:16.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.hongkiat.com/blog/install-chrome-different-drive-windows-10/">https://www.hongkiat.com/blog/install-chrome-different-drive-windows-10/</a></p>
<p><em>方法同样适用zoom</em></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[list [[]] * num 不能随便用]]></title>
        <id>https://ChenHaoHere.github.io/post/list-num-bu-neng-sui-bian-yong/</id>
        <link href="https://ChenHaoHere.github.io/post/list-num-bu-neng-sui-bian-yong/">
        </link>
        <updated>2020-03-23T04:57:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id=""></h1>
<p>今天想要动态建一个列表, 很自然的想到</p>
<pre><code class="language-python">scores = [[]] * num
for i in range(nun):
    scores[i].append(result)
</code></pre>
<p>结果得到的结果每个都一模一样, 才发现原来这样子出来的list里的list是<strong>共享内存</strong>的, 实验如下</p>
<pre><code class="language-python">a = [[]] * 8
print(a) # [[], [], [], [], [], [], [], []]

a[0].append(1) # 期望中a是[[1], [], [], [], [], [], [], []]
print(a) # 实际上a是[[1], [1], [1], [1], [1], [1], [1], [1]]
</code></pre>
<p>验证也很好验证</p>
<pre><code class="language-python">print(id(a[0])) # 140650110134408
print(id(a[1])) # 140650110134408 显然内存是共享的
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用union实现位操作]]></title>
        <id>https://ChenHaoHere.github.io/post/shi-yong-union-shi-xian-wei-cao-zuo/</id>
        <link href="https://ChenHaoHere.github.io/post/shi-yong-union-shi-xian-wei-cao-zuo/">
        </link>
        <updated>2020-03-17T05:16:25.000Z</updated>
        <content type="html"><![CDATA[<p>使用union实现位操作</p>
<blockquote>
<p>C语言关键字<strong>union</strong>使结构体里的变量共享一段内存</p>
</blockquote>
<p>eg:</p>
<pre><code class="language-c">#include &lt;iostream&gt;

using namespace std;

typedef struct {
    //也可以全部改用unsigned char, 会好看些
    char bit0 : 1;
    char bit1 : 1;
    char bit2 : 1;
    char bit3 : 1;
    char bit4 : 1;
    char bit5 : 1;
    char bit6 : 1;
    char bit7 : 1;
}bits;
typedef union {
    char data_char;
    bits data_bits;
}utype;

typedef struct {
    int port;
    utype LED;//这样就可以对8个LED单独控制
}TEST;

int main(){
    TEST test;
    test.port = 01;
    test.LED.data_char = 0x00;//全灭
    printf(&quot;%d\n&quot;, test.LED.data_bits.bit0);//0
    printf(&quot;%d\n&quot;, test.LED.data_bits.bit1);//0
    printf(&quot;%d\n&quot;, test.LED.data_bits);//0

    test.LED.data_bits.bit1 = 1;//针对第一位操作, 点亮它
    printf(&quot;%d\n&quot;, test.LED.data_bits.bit0);//0
    printf(&quot;%d\n&quot;, test.LED.data_bits.bit1);//0
    printf(&quot;%d\n&quot;, test.LED.data_bits);//2

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[shutdown jupyter notebook from remote via ssh]]></title>
        <id>https://ChenHaoHere.github.io/post/shutdown-jupyter-notebook-from-remote-via-ssh/</id>
        <link href="https://ChenHaoHere.github.io/post/shutdown-jupyter-notebook-from-remote-via-ssh/">
        </link>
        <updated>2020-03-11T23:57:39.000Z</updated>
        <content type="html"><![CDATA[<p>If you launch the notebook from a command prompt, you can shut it down by pressing Ctrl-C in that same command prompt. If not, you can run <code>jupyter notebook stop 8888</code>.</p>
]]></content>
    </entry>
</feed>